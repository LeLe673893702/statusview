Properties properties = new Properties()
properties.load(new FileInputStream("./bintray.properties"))

def gitUrl = 'https://github.com/LeLe673893702/statusview.git'   // Git仓库的url
def siteUrl = 'https://github.com/LeLe673893702/statusview'   // 项目的主页

version = rootProject.ext["versionName"]
group = "com.newler"

bintray {
    tasks.withType(Javadoc).all {
        enabled = false
    }
    user = properties.getProperty("bintray_user")
    key = properties.getProperty("bintray_apikey")

    pkg {
        repo = 'maven'
        name = properties.getProperty("pom_name")
        licenses = ["Apache-2.0"]
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        publish = true // 是否是公开项目。

        version {
            name = rootProject.ext["versionName"]
            desc = ''
            released = new Date()
            vcsTag = rootProject.ext["versionName"]
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
    configurations = ['archives']
}



install {
    tasks.withType(Javadoc).all {
        enabled = false
    }
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name properties.getProperty("pom_name")
                description 'android status view manager, you can alse extend it.'
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'newler'        //填写bintray或者github的用户名
                        name 'LiuLe'         //姓名，可以是中文
                        email 'newler009@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.encoding = 'UTF-8'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task dokkaJavadoc(type:  dokka.getClass()) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}
task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}


artifacts {
    archives javadocJar
    archives sourcesJar
}
